/**
 * @fileoverview Firestore Security Rules for ExpenseFlow.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model.  Each user has full control over their own profile and transaction data. No cross-user access is permitted except through explicit role-based mechanisms (not yet implemented).  The rules are designed for Authorization Independence, minimizing the need for expensive `get()` calls.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.  The `userId` MUST match the Firebase Auth UID.
 * - /users/{userId}/transactions/{transactionId}: Stores transaction data.  The `userId` path parameter MUST match both the Firebase Auth UID and the `transaction.userId` field.
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - Transactions are strictly owned by the user identified in the path.
 * - Data validation is limited to relational integrity (userId consistency) and ownership checks. Content validation is relaxed for prototyping.
 *
 * Denormalization for Authorization:
 * The `Transaction.userId` field is denormalized to match the `userId` path parameter. This is enforced during `create` operations and immutability is enforced on `update` operations. This allows for efficient authorization checks without needing to read other documents.
 *
 * Structural Segregation:
 * User profiles and transactions are stored in separate collections (`/users/{userId}` and `/users/{userId}/transactions/{transactionId}`) to simplify access control and maintain a homogenous security posture.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile.
     * @allow (get) User with UID 'user123' can read their own profile.
     * @allow (update) User with UID 'user123' can update their own profile.
     * @allow (delete) User with UID 'user123' can delete their own profile.
     * @deny (create) User with UID 'user456' cannot create a profile with ID 'user123'.
     * @deny (get) User with UID 'user456' cannot read profile 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Do not allow listing of all users
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId; // Enforce immutability of user ID
      allow delete: if isOwner(userId) && resource != null; // Ensure document exists before delete
    }

    /**
     * @description Controls access to transaction documents within a user's subcollection.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create) User 'user123' can create a transaction in their own 'transactions' collection.
     * @allow (get) User 'user123' can read a transaction in their own 'transactions' collection.
     * @allow (update) User 'user123' can update a transaction in their own 'transactions' collection.
     * @allow (delete) User 'user123' can delete a transaction in their own 'transactions' collection.
     * @deny (create) User 'user456' cannot create a transaction in user 'user123's collection.
     * @deny (get) User 'user456' cannot read a transaction from user 'user123's collection.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/transactions/{transactionId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId; // Enforce immutability of userId
      allow delete: if isExistingOwner(userId);
    }
  }
}